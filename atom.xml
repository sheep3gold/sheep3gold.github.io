<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yangxin&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-12T14:50:35.967Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring全家桶总结</title>
    <link href="http://yoursite.com/2019/01/12/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/12/Spring全家桶总结/</id>
    <published>2019-01-12T14:46:19.000Z</published>
    <updated>2019-01-12T14:50:35.967Z</updated>
    
    <content type="html"><![CDATA[<p>简介：这是针对Spring全家桶系列的总结，后面会陆续添加更新<br><a id="more"></a></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h1 id="SSM综合"><a href="#SSM综合" class="headerlink" title="SSM综合"></a>SSM综合</h1><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：这是针对Spring全家桶系列的总结，后面会陆续添加更新&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC_study</title>
    <link href="http://yoursite.com/2019/01/09/SpringMVC-study/"/>
    <id>http://yoursite.com/2019/01/09/SpringMVC-study/</id>
    <published>2019-01-09T13:03:28.000Z</published>
    <updated>2019-01-17T04:32:55.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC的学习"><a href="#SpringMVC的学习" class="headerlink" title="SpringMVC的学习"></a>SpringMVC的学习</h1><a id="more"></a><h3 id="sublime使用"><a href="#sublime使用" class="headerlink" title="sublime使用"></a>sublime使用</h3><p>sublime真是编辑器之神，安装install package,然后安装插件 pretty json cmd+ctrl+j格式化json数据。</p><h3 id="SpringMVC流程图"><a href="#SpringMVC流程图" class="headerlink" title="SpringMVC流程图"></a>SpringMVC流程图</h3><h5 id="mvc简易模型图"><a href="#mvc简易模型图" class="headerlink" title="mvc简易模型图"></a>mvc简易模型图</h5><p><img src="\blogPic\springmvc\mvcmodel1.png" alt="mvc1"></p><h5 id="mvc框架结构"><a href="#mvc框架结构" class="headerlink" title="mvc框架结构"></a>mvc框架结构</h5><p><img src="\blogPic\springmvc\mvcmodel2.png" alt="mvc2"></p><p><img src="\blogPic\springmvc\mvcmodel3.png" alt="mvc2"></p><h3 id="springmvc相关内容"><a href="#springmvc相关内容" class="headerlink" title="springmvc相关内容"></a>springmvc相关内容</h3><h4 id="springmvc的使用步骤"><a href="#springmvc的使用步骤" class="headerlink" title="springmvc的使用步骤"></a>springmvc的使用步骤</h4><ol><li>配置web.xml：<br>配置前端控制器：tomcat启动时初始化、指定springmvc的配置文件的位置</li><li>编写springmvc的配置文件：<br>开启包扫描<br>配置视图解析器：指定如果去查找视图</li><li>编写自定义处理器<br>将处理器装配到容器中<br>编写请求的url映射关系：@RequestMapping(“xxx”):来映射要执行的方法<br>在@RequestMapping(“xxx”)下编写方法处理具体的业务逻辑，返回一个ModelAndView，其中可以封装视图名称和数据。</li></ol><h4 id="RequestMapping映射请求"><a href="#RequestMapping映射请求" class="headerlink" title="RequestMapping映射请求"></a>RequestMapping映射请求</h4><ul><li>标准URL映射</li><li>Ant风格的映射：*(0个或多个字符)、？(单个字符)、**(0个或多个路径)</li><li>Rest风格的映射：占位符</li><li>限定请求方法的映射：get、post、put、delete</li><li>限定参数的映射：限定哪些请求参数可以访问</li></ul><h4 id="使用json"><a href="#使用json" class="headerlink" title="使用json"></a>使用json</h4><h5 id="响应json数据"><a href="#响应json数据" class="headerlink" title="响应json数据"></a>响应json数据</h5><p>@ResponseBody：<br>当一个处理请求的方法标记为@ResponseBody时，表示该方法需要输出其他视图（json、xml），springmvc会通过默认的json转化器转化输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 将list集合响应成json数据</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">@RequestMapping(value=&quot;show28&quot;)</span><br><span class="line">@ResponseBody//将数据响应成json格式的数据</span><br><span class="line">public List&lt;User&gt; test28() &#123;</span><br><span class="line"> List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line"> for(int i = 0;i&lt; 20;i++) &#123;</span><br><span class="line">  User user = new User();</span><br><span class="line">  user.setId(i+1L);</span><br><span class="line">  user.setUsername(&quot;zhangsan&quot;+i);</span><br><span class="line">  user.setName(&quot;张三&quot;+i);</span><br><span class="line">  user.setAge(18);</span><br><span class="line">  list.add(user);</span><br><span class="line">  &#125;</span><br><span class="line">  return list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在使用jackson转换json数据时需要消息转换器HttpMessageConverter的支持，该消息转换器默认并没有开启。</p><p>在配置文件中注册注解驱动：配置该标签后会自动注册消息转换器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置注解驱动--&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><h5 id="使用pojo接收json数据"><a href="#使用pojo接收json数据" class="headerlink" title="使用pojo接收json数据"></a>使用pojo接收json数据</h5><p>@RequestBody：接收一个json并且转换成一个对象。<br>接收一个json数据并反序列化为一个user对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 将提交的json格式的数据封装到user对象中</span><br><span class="line"> * @RequestBody()：自动将json数据序列化成一个user对象</span><br><span class="line"> * @param model</span><br><span class="line"> * @param user</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line"> @RequestMapping(value=&quot;show29&quot;)</span><br><span class="line"> public String test29(Model model,@RequestBody User</span><br><span class="line"> user) &#123;</span><br><span class="line">  model.addAttribute(&quot;msg&quot;, user);</span><br><span class="line">  return &quot;hello&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h5><p>原因:使用的消息转换器换成了StringHttpMessageConverter，<br>该转换器中使用的默认的编码为ISO_8859_1：</p><p>解决方案:<br>    修改消息转换器中的编码集</p><p>将注解驱动修改如下：</p><ol><li>设置String的消息转换器</li><li>该消息转换器中有一个构造函数可以设置编码集，因此只要直接赋值即可。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置注解驱动--&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;</span><br><span class="line">    &lt;mvc:message-converters&gt;</span><br><span class="line">        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;constructor-arg index=&quot;0&quot; value=&quot;utf-8&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:message-converters&gt;</span><br><span class="line">&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>有时如果在一个Contoller中所有的方法都是用来响应json格式数据的，那么如果有多个方法，就需要在多个方法上使用@ResponseBody，这样太麻烦，springmvc提供了一个@RestController，将该注解使用在Controller类上，那么该controller中的所有方法都默认是响应json格式的数据了。</p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="步骤一：添加依赖"><a href="#步骤一：添加依赖" class="headerlink" title="步骤一：添加依赖"></a>步骤一：添加依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件上传 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="步骤二：配置文件上传解析器"><a href="#步骤二：配置文件上传解析器" class="headerlink" title="步骤二：配置文件上传解析器"></a>步骤二：配置文件上传解析器</h5><p>需要在springmvc的配置文件中配置一个文件上传解析器（在spring-web包下），并且设置其解析器的某些参数，如上传文件大小和编码集等。</p><p>在springmvc-servlet.xml中配置：<br>注意：必须配置id属性，并且名称固定为multipartResolver，否则无法使用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置文件上传解析器--&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;!--设置上传文件大小--&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value=&quot;5242880&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--设置上传文件编码集--&gt;</span><br><span class="line">    &lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h5 id="步骤三：Controller方法"><a href="#步骤三：Controller方法" class="headerlink" title="步骤三：Controller方法"></a>步骤三：Controller方法</h5><p>注意:存放文件的目录upload需要先行创建好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 文件上传</span><br><span class="line"> * 需要通过MultipartFile类型来接收上传数据</span><br><span class="line"> *</span><br><span class="line"> * @throws Exception</span><br><span class="line"> * @throws IllegalStateException</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(&quot;show31&quot;)</span><br><span class="line">public String test31(Model model,@RequestParam(&quot;file&quot;)MultipartFile file) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">    if (file!=null) &#123;</span><br><span class="line">        //将文件存储到指定路径</span><br><span class="line">        file.transferTo(new File(&quot;d://upload//&quot;+file.getOriginalFilename()));</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(&quot;msg&quot;, &quot;上传成功!&quot;);</span><br><span class="line">    return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转发及重定向（forward、redirect）"><a href="#转发及重定向（forward、redirect）" class="headerlink" title="转发及重定向（forward、redirect）"></a>转发及重定向（forward、redirect）</h4><p>返回值为字符串时，默认为视图名称。当返回值字符串是以”forward:”或者”redirect:”开头，则会被认为是转发或者重定向。<br>使用方式如下：<br>转发：forward:/hello/show.do(绝对路径)或者forward:show.do(相对路径)<br>重定向：redirect:/hello/show.do(绝对路径)或者redirect:show.do(相对路径)<br>/：表示绝对路径，指的是localhost:8080/springmvc（项目名称可以省略）<br>不带/：表示相对路径，相对于当前请求的路径<br>    如果当前请求是：localhost:8080/springmvc（项目名称可以省略）/hello/show32<br>    那么不带/：表示localhost:8080/springmvc（项目名称可以省略）/hello/</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>HandlerExecutionChain是一个执行链，当请求到达DispatchServlet时，DispatchServlet根据请求路径到HandlerMapping查询具体的Handler，从HandlerMapping返回执行链给DispatcherServlet，其中包含了一个具体的Handler对象和Interceptors（拦截器集合）。</p><p>拦截器一般用于对处理器进行预处理和后处理。</p><p>应用场景：</p><p>1、权限检查：如登录检测，进入处理器前检测用户是否登录，如果没有登陆直接返回到登录页面。</p><p>2、性能监控：有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，统计处理器执行使用了多少时间。</p><p>springmvc的拦截器接口（HandlerInterceptor）定义了三个方法：</p><ul><li>preHandle调用Handler之前执行，称为预处理回调方法<br>返回值：true表示放行，后续业务逻辑继续执行<pre><code>false表示被拦截，后续业务逻辑不再执行，但之前返回true的拦截器的请求完成回调方法会倒叙执行</code></pre></li><li>postHandle调用Handler之后执行，称为后处理回调方法</li><li>afterCompletion视图渲染完成之后执行，可以称为请求完成回调方法</li></ul><h5 id="拦截器的执行过程"><a href="#拦截器的执行过程" class="headerlink" title="拦截器的执行过程"></a>拦截器的执行过程</h5><p><img src="\blogPic\springmvc\intercepter1.png" alt="intercepter1"></p><p><img src="\blogPic\springmvc\intercepter2.png" alt="intercepter2"> </p><p>拦截器的配置过程：</p><p>编写自定义拦截器实现HandlerInterceptor<br>在springmvc-servlet.xml中注册自定义拦截器</p><h6 id="配置自定义拦截器"><a href="#配置自定义拦截器" class="headerlink" title="配置自定义拦截器"></a>配置自定义拦截器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置拦截器--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!--拦截所有请求--&gt;</span><br><span class="line">        &lt;mvc:mapping path=&quot;/**&quot;/&gt;</span><br><span class="line">        &lt;bean class=&quot;cn.itcast.interceptor.MyInterceptor1&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h4 id="配置乱码过滤器"><a href="#配置乱码过滤器" class="headerlink" title="配置乱码过滤器"></a>配置乱码过滤器</h4><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--post请求乱码过滤器--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;!-- 配置Tomcat插件 --&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">            &lt;path&gt;/&lt;/path&gt;&lt;!-- 相当于工程名称，一旦配置了/，那么在访问时可以省略工程名称 --&gt;</span><br><span class="line">            &lt;!--设置get请求编码集--&gt;</span><br><span class="line">            &lt;uriEncoding&gt;utf-8&lt;/uriEncoding&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC的学习&quot;&gt;&lt;a href=&quot;#SpringMVC的学习&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC的学习&quot;&gt;&lt;/a&gt;SpringMVC的学习&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://yoursite.com/2019/01/09/markdown/"/>
    <id>http://yoursite.com/2019/01/09/markdown/</id>
    <published>2019-01-09T08:17:06.000Z</published>
    <updated>2019-01-17T03:05:07.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><blockquote><p>本博客为markdown的学习<br><a id="more"></a></p></blockquote><h1 id="markdown常用语法："><a href="#markdown常用语法：" class="headerlink" title="markdown常用语法："></a>markdown常用语法：</h1><p>使用   #</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题:"></a>一级标题:</h1><p>#</p><h2 id="二级标题："><a href="#二级标题：" class="headerlink" title="二级标题："></a>二级标题：</h2><p>##</p><h3 id="三级标题："><a href="#三级标题：" class="headerlink" title="三级标题："></a>三级标题：</h3><p> ###</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题:"></a>四级标题:</h4><p>####</p><h5 id="五级标题："><a href="#五级标题：" class="headerlink" title="五级标题："></a>五级标题：</h5><p>#####</p><h6 id="六级标题："><a href="#六级标题：" class="headerlink" title="六级标题："></a>六级标题：</h6><p>######</p><h3 id="无序列表-（后面加空格）"><a href="#无序列表-（后面加空格）" class="headerlink" title="无序列表: -（后面加空格）"></a>无序列表: -（后面加空格）</h3><ul><li style="list-style: none"><input type="checkbox"> 文本1：</li><li style="list-style: none"><input type="checkbox"> 文本2：</li><li style="list-style: none"><input type="checkbox"> 文本3：</li></ul><h3 id="水平线-后面不加空格-，一个-是水平线，三个-是水平虚线"><a href="#水平线-后面不加空格-，一个-是水平线，三个-是水平虚线" class="headerlink" title="水平线: -(后面不加空格)，一个-是水平线，三个-是水平虚线"></a>水平线: -(后面不加空格)，一个-是水平线，三个-是水平虚线</h3><h2 id=""><a href="#" class="headerlink" title="-"></a>-</h2><h3 id="有序列表-1"><a href="#有序列表-1" class="headerlink" title="有序列表:1."></a>有序列表:1.</h3><ol><li>文本1：1.</li><li>文本2：2.</li><li>文本3：3.</li></ol><h3 id="插入链接：-显示文本-链接地址"><a href="#插入链接：-显示文本-链接地址" class="headerlink" title="插入链接：[显示文本](链接地址)"></a>插入链接：[显示文本](链接地址)</h3><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="图片链接-图片-图片地址"><a href="#图片链接-图片-图片地址" class="headerlink" title="图片链接: ![图片](图片地址)"></a>图片链接: ![图片](图片地址)</h3><p><img src="\blogPic\markdown\girl.jpg" alt="美女"></p><h3 id="引用：在希望引用的文字前加上-gt-就好了"><a href="#引用：在希望引用的文字前加上-gt-就好了" class="headerlink" title="引用：在希望引用的文字前加上 &gt; 就好了"></a>引用：在希望引用的文字前加上 &gt; 就好了</h3><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。  </p></blockquote><h3 id="粗体和斜体：两个-包含就是粗体，一个-就是斜体"><a href="#粗体和斜体：两个-包含就是粗体，一个-就是斜体" class="headerlink" title="粗体和斜体：两个 * 包含就是粗体，一个* 就是斜体"></a>粗体和斜体：两个 * 包含就是粗体，一个* 就是斜体</h3><p><strong>一盏灯</strong>，一片昏黄：一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><h3 id="代码引用：如果只有一段，不分行，可以用-将语句包起来；如果一用分为多行，可以将-置于这段代码的首行和末行"><a href="#代码引用：如果只有一段，不分行，可以用-将语句包起来；如果一用分为多行，可以将-置于这段代码的首行和末行" class="headerlink" title="代码引用：如果只有一段，不分行，可以用 `将语句包起来；如果一用分为多行，可以将```置于这段代码的首行和末行"></a>代码引用：如果只有一段，不分行，可以用 `将语句包起来；如果一用分为多行，可以将```置于这段代码的首行和末行</h3><p><code>hello world</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一段代码</span><br><span class="line">第二段代码</span><br><span class="line">第三段代码</span><br></pre></td></tr></table></figure></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><img src="\blogPic\markdown\biaoge.png" alt="tupian"></p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$2</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table><h3 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符： \"></a>转义字符： \</h3><p>#,\,`,*,_,{},[],(),+,-,.,!</p><h3 id="居中：-lt-center-lt-center"><a href="#居中：-lt-center-lt-center" class="headerlink" title="居中：&lt;center>  &lt;/center>"></a>居中：&lt;center>  &lt;/center></h3><center>居中</center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本博客为markdown的学习&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="http://yoursite.com/2019/01/06/Welcome/"/>
    <id>http://yoursite.com/2019/01/06/Welcome/</id>
    <published>2019-01-06T12:48:44.000Z</published>
    <updated>2019-01-09T07:46:41.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a><center>欢迎来到我的博客</center></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎来到我的博客&quot;&gt;&lt;a href=&quot;#欢迎来到我的博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的博客&quot;&gt;&lt;/a&gt;&lt;center&gt;欢迎来到我的博客&lt;/center&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
